Given two sorted arrays, a[] and b[], the task is to find the median of these sorted arrays, in O(log n + log m) time complexity, when n is the number of elements in the first array, and m is the number of elements in the second array. 


Input: ar1[] = {-5, 3, 6, 12, 15}
        ar2[] = {-12, -10, -6, -3, 4, 10}
Output : The median is 3.
Explanation : The merged array is :
        ar3[] = {-12, -10, -6, -5 , -3,
                 3, 4, 6, 10, 12, 15},
       So the median of the merged array is 3

Input: ar1[] = {2, 3, 5, 8}
        ar2[] = {10, 12, 14, 16, 18, 20}
Output : The median is 11.
Explanation : The merged array is :
        ar3[] = {2, 3, 5, 8, 10, 12, 14, 16, 18, 20}
        if the number of the elements are even, 
        so there are two middle elements,
        take the average between the two :
        (10 + 12) / 2 = 11.


************************************************************************************************************************************************

ans:



/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <bits/stdc++.h>

using namespace std;

int main()
{
    vector<int>v1;
    vector<int>v2;
    
    v1={-5, 3, 6, 12, 15};
    v2={-12, -10, -6, -3, 4, 10};
    
    for(int i=0;i<v2.size();i++){
        v1.push_back(v2[i]);
    }
    
    
    sort(v1.begin(),v1.end());  //1 2 3 4 5 6 7 9
    int n=v1.size();
    if(n %2==0){
        cout<<"even"<<v1[n/2 -1];
    }
    else{
        cout<<"odd"<<v1[n/2];
    }

    return 0;
}