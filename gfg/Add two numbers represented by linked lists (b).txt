Given two numbers represented by two linked lists of size N and M. The task is to return a sum list.

The sum list is a linked list representation of the addition of two input numbers from the last.

Example 1:

Input:
N = 2
valueN[] = {4,5}
M = 3
valueM[] = {3,4,5}
Output: 3 9 0  
Explanation: For the given two linked
list (4 5) and (3 4 5), after adding
the two linked list resultant linked
list will be (3 9 0).
Example 2:

Input:
N = 2
valueN[] = {6,3}
M = 1
valueM[] = {7}
Output: 7 0
Explanation: For the given two linked
list (6 3) and (7), after adding the
two linked list resultant linked list
will be (7 0).
Your Task:
The task is to complete the function addTwoLists() which has node reference of both the linked lists and returns the head of the sum list.   

Expected Time Complexity: O(N+M)
Expected Auxiliary Space: O(Max(N,M)) for the resultant list.

Constraints:
1 <= N, M <= 5000

********************************************************************************************************************************

ans:


class Solution
{
    public:
    
        void insertattail(struct Node* &head,struct Node* &tail,int val){
        struct Node* temp=new Node(val);
        if(head==NULL){
            head=temp;
            tail=temp;
            return;
        }
        else{
            tail->next=temp;
            tail=temp;
        }
    }
    
    struct Node* reverse(struct Node* head){
        struct Node* curr=head;
        struct Node* prev=NULL;
        struct Node* next=NULL;
        while(curr!=NULL){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
     struct Node* add(struct Node* l1,struct Node* l2){
     int carry =0;
        struct Node* anshead=NULL;
        struct Node* anstail=NULL;
        while(l1!=NULL && l2 !=NULL){
            int sum=carry+l1->data+l2->data;
            int digit=sum%10;

            insertattail(anshead,anstail,digit);
            carry=sum/10;
            l1=l1->next;
            l2=l2->next;
        }
        
           while(l1!=NULL){
            int sum=carry+l1->data;
            int digit=sum%10;

            insertattail(anshead,anstail,digit);
            carry=sum/10;
            l1=l1->next;
        }
           while(l2 !=NULL){
            int sum=carry+l2->data;
            int digit=sum%10;

            insertattail(anshead,anstail,digit);
            carry=sum/10;
             l2=l2->next;
        }
        
        while(carry!=0){
            int sum=carry;
            int digit=sum%10;
            insertattail(anshead,anstail,digit);
            carry=sum/10;
            
        }
        
        return anshead;
    }
    
 
    
    //Function to add two numbers represented by linked list.
    struct Node* addTwoLists(struct Node* l1, struct Node* l2)
    {
        // code here
         l1=reverse(l1);
        l2=reverse(l2);
        Node* ans=add(l1,l2);
        ans=reverse(ans);
        return ans;
    }
};



