Given a string s1 and a string s2, write a snippet to say whether s2 is a rotation of s1? 
(eg given s1 = ABCD and s2 = CDAB, return true, given s1 = ABCD, and s2 = ACBD , return false)

Algorithm: areRotations(str1, str2)

    1. Create a temp string and store concatenation of str1 to
       str1 in temp.
                          temp = str1.str1
    2. If str2 is a substring of temp then str1 and str2 are 
       rotations of each other.

    Example:                 
                     str1 = "ABACD"
                     str2 = "CDABA"

     temp = str1.str1 = "ABACDABACD"
     Since str2 is a substring of temp, str1 and str2 are 
     rotations of each other.

     *********************************************************************************************************************

     ans:



# include <bits/stdc++.h>
using namespace std;



bool areRotations(string str1, string str2)
{
if (str1.length() != str2.length())
		return false;

string temp = str1 + str1;
return (temp.find(str2) != string::npos);
}



int main()
{
string str1 = "ABACD", str2 = "CDABA";
if (areRotations(str1, str2))
	cout<<"Strings are rotations of each other";
else
	cout<<"Strings are not rotations of each other";
return 0;
}
