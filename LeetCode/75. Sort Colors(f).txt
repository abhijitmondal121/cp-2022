Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.

***********************************************************************************************************************************

ans:

class Solution {
public:
    void sortColors(vector<int>& nums) {
//         using sort function
//          sort(nums.begin(),nums.end());
        
//          using itarative function
        
        int z=0,o=0,t=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0){
                z++;
            }
            if(nums[i]==1){
                o++;
            }
            if(nums[i]==2){
                t++;
            }         
        }
        int j=0;
        while(z!=0){
            nums[j]=0;
            z--;
            j++;
        }
        while(o!=0){
            nums[j]=1;
            o--;
            j++;
        }
       while(t!=0){
            nums[j]=2;
            t--;
            j++;
        }  
    }
};
