Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 

Constraints:

-231 <= val <= 231 - 1
Methods pop, top and getMin operations will always be called on non-empty stacks.
At most 3 * 104 calls will be made to push, pop, top, and getMin


*************************************************************************************************************************************

ans:




class MinStack {
public:
    stack<int>s;
		int minElement = INT_MAX;
    MinStack() {
        
    }
    
    void push(int val) {
        if(minElement>=val){
            // whenever val is lesser than current minElement, store current minElement in stack and make val as current minElement
				s.push(minElement);
				 minElement = val;
			}
			  s.push(val);
    }
    
    void pop() {
        if(minElement==s.top()){//top is minElement then previous element will be previous minElement, so pop and store current top as current MinElement
				s.pop();
				minElement = s.top();
			}
			s.pop();
    }
    
    int top() {
        return s.top();
    }
    
    int getMin() {
       return minElement; 
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */