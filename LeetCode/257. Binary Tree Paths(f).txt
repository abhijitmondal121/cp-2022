Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

 

Example 1:


Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]
Example 2:

Input: root = [1]
Output: ["1"]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
-100 <= Node.val <= 100


************************************************************************************************************************************************************************

ans:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void binerysearch(vector<string> &s,TreeNode* root,string t){
        if(!root->left && !root->right){
            s.push_back(t);
            return;   
        }
            
       if(root->left){
           binerysearch(s,root->left,t+"->"+to_string(root->left->val));
       } 
       if(root->right){
           binerysearch(s,root->right,t+"->"+to_string(root->right->val));
       }         
    }
    
    vector<string> binaryTreePaths(TreeNode* root) {
     vector<string>s;
        if(!root)return s;
        binerysearch(s,root,to_string(root->val));
        return s;
    }
};