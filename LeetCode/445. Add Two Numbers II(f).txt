You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]
Example 2:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [8,0,7]
Example 3:

Input: l1 = [0], l2 = [0]
Output: [0]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.
 

Follow up: Could you solve it without reversing the input lists?


****************************************************************************************************

ans:


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
        void insertattail(ListNode* &head,ListNode* &tail,int val){
        ListNode* temp=new ListNode(val);
        if(head==NULL){
            head=temp;
            tail=temp;
            return;
        }
        else{
            tail->next=temp;
            tail=temp;
        }
    }
    
    ListNode* reverse(ListNode* head){
        ListNode* curr=head;
        ListNode* prev=NULL;
        ListNode* next=NULL;
        while(curr!=NULL){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    
    ListNode* add(ListNode* l1,ListNode* l2){
        int carry =0;
        ListNode* anshead=NULL;
        ListNode* anstail=NULL;
        while(l1!=NULL && l2 !=NULL){
            int sum=carry+l1->val+l2->val;
            int digit=sum%10;

            insertattail(anshead,anstail,digit);
            carry=sum/10;
            l1=l1->next;
            l2=l2->next;
        }
        
           while(l1!=NULL){
            int sum=carry+l1->val;
            int digit=sum%10;

            insertattail(anshead,anstail,digit);
            carry=sum/10;
            l1=l1->next;
        }
           while(l2 !=NULL){
            int sum=carry+l2->val;
            int digit=sum%10;

            insertattail(anshead,anstail,digit);
            carry=sum/10;
             l2=l2->next;
        }
           while(carry!=0){
            int sum=carry;
            int digit=sum%10;
            insertattail(anshead,anstail,digit);
            carry=sum/10;
            
        }
        return anshead;
    }
    
    
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
         l1=reverse(l1);
        l2=reverse(l2);
        ListNode* ans=add(l1,l2);
        ans=reverse(ans);
        return ans;
    }
};