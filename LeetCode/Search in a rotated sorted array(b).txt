There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104


**********************************************************************************************************************************

ans:


class Solution {
private:
    int getpivat(vector<int>& arr,int n){
	int s=0;
    int e=n-1;
    int mid=s+(e-s)/2;
    while(s<e){
        if(arr[mid]>=arr[0]){
            s=mid+1;
        }
        else{
            e=mid;
        }
        mid=s+(e-s)/2;
    }
    return s;
    
}

int binarysearch(vector<int>& arr,int s,int e,int key){
   int mid=s+(e-s)/2;
    while(s<=e){
    if(arr[mid]==key){
        return mid;
    }
    if(arr[mid]>key){
        e=mid-1;
    }
    else{
        s=mid+1;
    }
        mid=s+(e-s)/2;
    }

    return -1;
}

    
    
    
public:
    int search(vector<int>& arr, int k) {
    int n=arr.size();    
    int pivert=getpivat(arr,n);
    if(k>=arr[pivert]&& k<=arr[n-1]){
        return binarysearch(arr,pivert,n-1,k); 
    }
    else{
        return binarysearch(arr,0,pivert-1,k);
    }
    
    }
};



