Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.


**********************************************************************************************************************************

ans:


class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        
        
//         one loop itaration
        int p1=1,p2=1;
        int n=nums.size();
        vector<int>ans(n,1);
        for(int i=0;i<n;i++){
            ans[i]*=p1;
            p1*=nums[i];
            int j=n-i-1;
            ans[j]*=p2;
            p2*=nums[j];
        }
        return ans;  
       
        
//    using two loops     
//        int p=1;
//         int n=nums.size();
//         vector<int>ans(n,1);
//         for(int i=0;i<n;i++){
//             ans[i]=p;
//             p*=nums[i];
//         }
//         p=1;
        
//         for(int i=n-1;i>=0;i--){
//             ans[i]*=p;
//             p*=nums[i];
//         }
//         return ans;
    }
};