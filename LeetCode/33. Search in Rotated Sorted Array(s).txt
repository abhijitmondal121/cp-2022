There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104

****************************************************************************************************************************************************************************


ans:


class Solution {
public:
    
    int getpivert(vector<int>v,int n){
        int s=0,e=n-1;
        int mid=s+(e-s)/2;
        while(s<e){
            
            if(v[mid]>=v[0]){
                s=mid+1;
            }
            else{
                e=mid;
            }
            mid=s+(e-s)/2;
        }
        return s;
    }
    
    int search(vector<int>v,int s,int e,int k){
        int mid=s+(e-s)/2;
        while(s<=e){
            
            if(v[mid]==k)return mid;
            if(v[mid]<k){
                s=mid+1;
            }
            else{
                e=mid-1;
            }
            mid=s+(e-s)/2;
        }
        return -1;
    }
    
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        int privert=getpivert(nums,n);
        
        if(nums[privert] <= target && target <= nums[n-1]){
            return search(nums,privert,n-1,target);
        }
        else{
            return search(nums,0,privert-1,target);
        }
        
    }
};